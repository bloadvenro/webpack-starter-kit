import * as webpack from 'webpack'
import { Destinations } from '../Destinations'
import * as HtmlPlugin from 'html-webpack-plugin'
import * as CleanPlugin from 'clean-webpack-plugin'
import * as WriteFilePlugin from 'write-file-webpack-plugin'
import * as injectLivereloadScriptTag from 'connect-livereload'
import { basename, extname } from 'path'
import { WebpackConfigurationUtils } from './ConfigurationUtils'

const DEV_SERVER_PORT = 9000
const DEV_SERVER_HOST = '0.0.0.0'

namespace plugins {
  export const hmr = new webpack.HotModuleReplacementPlugin()
  export const writeAssetsToDisk = new WriteFilePlugin({
    test: /\.html$/ // Step #1 to achieve .html livereload: write html files on disk. [#2 -> devServer.setup]
  })
  export const cleanOutputDir = new CleanPlugin([Destinations.directories.output], {
    verbose: true,
    root: Destinations.directories.root // Seems like plugin doesn't like absolute paths without specifying root.
  })
  export const templates = Destinations.templates.templatesList.map(
    template =>
      new HtmlPlugin({
        template,
        filename: basename(template, extname(template)) + '.html'
      })
  )
  export const provide = new webpack.ProvidePlugin({
    React: 'react' // Provide global React namespace for seamless JSX rendering (no explicit react imports).
  })
}

// (Un)comment (un)necessary rules.
// Do not forget to (un)install appropriate loaders!
namespace rules {
  export const pug: webpack.Rule = {
    test: /.pug$/,
    loader: require.resolve('pug-loader'),
    options: {
      pretty: true
    }
  }
  export const css: webpack.Rule = {
    test: /\.css$/,
    use: [
      {
        loader: require.resolve('style-loader') // creates style nodes from JS strings
      },
      {
        loader: require.resolve('css-loader') // translates CSS into CommonJS
      }
      // {
      //   loader: require.resolve('sass-loader')
      //   // loader: require.resolve('less-loader')
      //   // loader: require.resolve('stylus-loader')
      // }
    ]
  }
  export const fallback: webpack.Rule = {
    test: function matchEverything() {
      return true
    },
    exclude: [
      /\.js$/, // usually we rely on webpack when it comes to .js
      /\.html$/, // .html files are handled by html-webpack-plugin (or we can just enable html-loader).
      /\.json$/ // .json files are often generated by webpack internally (i.e. hot-update.json).
    ],
    loader: require.resolve('file-loader'),
    options: {
      name: '[name].[hash].[ext]' // Useful for assets hot module replacement.
    }
  }
  // Uncomment lines below to enable typescript support with react hmr.
  // export const typescript: webpack.Rule = {
  //   test: /\.tsx?$/,
  //   loaders: [require.resolve('react-hot-loader/webpack'), require.resolve('ts-loader')]
  // }
}

const configuration: webpack.Configuration = {
  entry: {
    development: [
      // Additions below are the standard boilerplate for HMR to work properly when using NodeJS API startup.
      // For each entry place it before application scripts like [...hotReplacementCode, <your scripts>].
      // Read why there is no `inline: true` for webpack-dev-server NodeJS API:
      // https://github.com/webpack/docs/wiki/webpack-dev-server#inline-mode-with-nodejs-api
      'webpack/hot/only-dev-server', // Stuff for accepting and applying changes.
      `webpack-dev-server/client?http://${DEV_SERVER_HOST}:${DEV_SERVER_PORT}`,
      // -----------------------------------------------------------------------------------------------------------
      Destinations.directories.assets.scripts
      // Uncomment the line below if react hmr support is necessary...
      // require.resolve('react-hot-loader/patch')
    ]
  },
  resolve: {
    alias: {
      // The way to get rid of '../../xxx' in import statements. All imports will now look like
      // "import Some from '~/components/Some'" and happen relative to the project root. Note that
      // tsconfig.json requires some similar options to configure.
      '~': Destinations.directories.assets.scripts
    },
    // (Un)comment (un)necessary extensions.
    extensions: [
      '.json',
      '.js',
      '.pug',
      '.css'
      // '.jsx',
      // '.ts',
      // '.tsx',
      // '.sass',
      // '.scss',
      // '.styl',
      // '.less',
    ]
  },
  plugins: WebpackConfigurationUtils.readPlugins(plugins),
  module: {
    rules: WebpackConfigurationUtils.readRules(rules)
  },
  output: {
    publicPath: '/', // You should never forget to define this option. Default does not fit.
    path: Destinations.directories.output,
    filename: '[name].js' // No need hashed names in development; hmr deals with replacement.
  },
  devServer: {
    before(app: any) {
      // Step #2 to achieve .html livereload:
      // inject livereload.js into html files before transferring to browser. [#3 -> bin/start.ts]
      app.use(injectLivereloadScriptTag())
    },
    hot: true,
    historyApiFallback: true, // For html5 history API to work.
    stats: {
      colors: true
    },
    overlay: true,
    host: DEV_SERVER_HOST,
    port: DEV_SERVER_PORT
  },
  devtool: 'inline-source-map'
}

export const webpackDevelopment = {
  configuration,
  plugins,
  rules
}
